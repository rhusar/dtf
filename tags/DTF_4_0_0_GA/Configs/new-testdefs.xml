<!--
  JBoss, Home of Professional Open Source
  Copyright 2008, Red Hat Middleware LLC, and individual contributors
  as indicated by the @author tags.
  See the copyright.txt in the distribution for a
  full listing of individual contributors.
  This copyrighted material is made available to anyone wishing to use,
  modify, copy, or redistribute it subject to the terms and conditions
  of the GNU Lesser General Public License, v. 2.1.
  This program is distributed in the hope that it will be useful, but WITHOUT A
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public License,
  v.2.1 along with this distribution; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  MA  02110-1301, USA.

  (C) 2008,
  @author JBoss Inc.
-->

<test_set xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="C:\HPDTF\Configs\dtf-testdefinitions.xsd">
	<default_timeout value="480"/>
	<description>Quick test definition file used for testing purposes.</description>
	<test_group name="DumpRunInformation">
		<task_declaration>
			<task id="DumpRunInformation" classname="DumpRunInformation" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="DumpRunInformation" descriptive_name="Dumps information on software version" author="Richard A. Begg">
			<description>
	  		This test is used to grab the information generated by report.
	  	</description>
			<configuration/>
			<action_list>
				<perform_task id="DumpRunInformation"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="ArjunaNesting">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="ArjunaNesting" classname="ArjunaNestingTest" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="ArjunaNesting1" descriptive_name="Arjuna Nesting 1" author="Mark Little">
			<description>
	  			This example demonstrates the difference between an	ArjunaSubtranAwareResource and the
	  			standard OTS version.  An ArjunaSubtranAwareResource always participates within a two-phase
				commit protocol for nested transactions.  Propagation occurs in the same way, however, i.e.,
				if registered using register_subtran_aware then the resource is not propagated to the parent;
				if using register_resource then it will be propagated.  For each nested transaction, it will
				take part in the two-phase protocol.  This test registers the resource with 'register_resource'
				and commits the top-level transaction.
	  		</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="ArjunaNesting"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="ArjunaNesting2" descriptive_name="Arjuna Nesting 2" author="Mark Little">
			<description>
				This example demonstrates the difference between an	ArjunaSubtranAwareResource and the
	  			standard OTS version.  An ArjunaSubtranAwareResource always participates within a two-phase
				commit protocol for nested transactions.  Propagation occurs in the same way, however, i.e.,
				if registered using register_subtran_aware then the resource is not propagated to the parent;
				if using register_resource then it will be propagated.  For each nested transaction, it will
				take part in the two-phase protocol.  This test registers the resource with 'register_subtran_aware'
				and commits the top-level transaction.
			</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="ArjunaNesting" parameters="-subtran"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="ArjunaNesting3" descriptive_name="Arjuna Nesting 3" author="Mark Little">
			<description>
				This example demonstrates the difference between an	ArjunaSubtranAwareResource and the
	  			standard OTS version.  An ArjunaSubtranAwareResource always participates within a two-phase
				commit protocol for nested transactions.  Propagation occurs in the same way, however, i.e.,
				if registered using register_subtran_aware then the resource is not propagated to the parent;
				if using register_resource then it will be propagated.  For each nested transaction, it will
				take part in the two-phase protocol.  This test registers the resource with 'register_resource'
				and rolls back the top-level transaction.
			</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="ArjunaNesting" parameters="-abort"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="ArjunaNesting4" descriptive_name="Arjuna Nesting 4" author="Mark Little">
			<description>
				This example demonstrates the difference between an	ArjunaSubtranAwareResource and the
	  			standard OTS version.  An ArjunaSubtranAwareResource always participates within a two-phase
				commit protocol for nested transactions.  Propagation occurs in the same way, however, i.e.,
				if registered using register_subtran_aware then the resource is not propagated to the parent;
				if using register_resource then it will be propagated.  For each nested transaction, it will
				take part in the two-phase protocol.  This test registers the resource with 'register_subtran_aware'
				and rolls back the top-level transaction.
	  		</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="ArjunaNesting" parameters="-abort -subtran"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Asynchronous">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="AsyncTest" classname="AsyncTest" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="AsyncTest1" descriptive_name="Asynchronous 1" author="Mark Little">
			<description>
	  	Unit test generated from tests\Asynchronous.  Has no threading optimisations.
	  </description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="AsyncTest"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="AsyncTest2" descriptive_name="Asynchronous 2" author="Mark Little">
			<description>
	  	Unit test generated from tests\Asynchronous.  ASYNC_PREPARE enabled
	  </description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="AsyncTest" jvm_parameters="-DASYNC_PREPARE=YES"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="AsyncTest3" descriptive_name="Asynchronous 3" author="Mark Little">
			<description>
	  	Unit test generated from tests\Asynchronous.  ASYNC_PREPARE and ASYNC_COMMIT enabled.
	  </description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="AsyncTest" jvm_parameters="-DASYNC_PREPARE=YES -DASYNC_COMMIT=YES"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="AsyncTest4" descriptive_name="Asynchronous 4" author="Mark Little">
			<description>
	  	Unit test generated from tests\Asynchronous.  ASYNC_PREPARE enabled with error in prepare.
	  </description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="AsyncTest" parameters="-errorp" jvm_parameters="-DASYNC_PREPARE=YES"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="AsyncTest5" descriptive_name="Asynchronous 5" author="Mark Little">
			<description>
	  	Unit test generated from tests\Asynchronous.  ASYNC_PREPARE enabled with error in commit.
	  </description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="AsyncTest" parameters="-errorc" jvm_parameters="-DASYNC_PREPARE=YES"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Basic">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="OTSServer" classname="OTS_Server" runner="ServiceRunner" type="expect_ready"/>
			<task id="AdvertiseOTSServer" classname="CosTransactionsTests.AdvertiseOTSServer" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="GridServer" classname="GridServer" runner="UnitTestRunner" type="expect_ready"/>
			<task id="GridClient" classname="GridClient" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="GridTest01" descriptive_name="Basic Grid Test" author="Mark Little">
			<description>Unit test generated from tests\Basic
	  </description>
			<configuration names_required="2"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="OTSServer" location="INDEPENDENT" parameters="-test" runtime_id="OTSServer"/>
				<perform_task id="AdvertiseOTSServer" location="INDEPENDENT" name_list="1"/>
				<start_task id="GridServer" name_list="2" runtime_id="Server"/>
				<perform_task id="GridClient" name_list="1,2" jvm_parameters="-DOTS_TRANSACTION_MANAGER=YES"/>
				<terminate_task runtime_id="Server"/>
				<terminate_task runtime_id="OTSServer"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Arjuna">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="ExplicitStackServer" classname="ExplicitStackServer" runner="UnitTestRunner" type="expect_ready"/>
			<task id="StackServer" classname="StackServer" runner="UnitTestRunner" type="expect_ready"/>
			<task id="ExplicitArjunaClient" classname="ExplicitArjunaClient" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="ImplicitArjunaClient" classname="ImplicitArjunaClient" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="ExplicitArjunaClient" descriptive_name="Explicit Context Prop Test" author="Mark Little">
			<description>
	  	Unit test generated from tests\ExplicitArjuna
	  </description>
			<configuration names_required="1"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="ExplicitStackServer" name_list="1" runtime_id="ExpServer"/>
				<perform_task id="ExplicitArjunaClient" name_list="1"/>
				<terminate_task runtime_id="ExpServer"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="ImplicitArjunaClient" descriptive_name="Implicit Context Prop Test" author="Mark Little">
			<description>
	  	Unit test generated from tests\ImplicitArjuna
	  </description>
			<configuration names_required="1" orb_flags="-ORBname arjuna.portable_interceptor.ots_interposition"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="StackServer" name_list="1" runtime_id="ImpServer"/>
				<perform_task id="ImplicitArjunaClient" name_list="1"/>
				<terminate_task runtime_id="ImpServer"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Checked">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="CheckedTransactions" classname="CheckedTransactions" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="UncheckedTransactions" descriptive_name="Tests unchecked transactions" author="Richard A. Begg">
			<description>
	  	Checked Transactions
	  </description>
			<configuration names_required="1"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="CheckedTransactions" parameters=""/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="CheckedTransactions" descriptive_name="Tests checked transactions" author="Richard A. Begg">
			<description>
	  	Checked Transactions
	  </description>
			<configuration names_required="1"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="CheckedTransactions" parameters="-check"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="DistributedHammerTests">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="Client1" classname="DistributedHammer1" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="Client2" classname="DistributedHammer2" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="Client3" classname="DistributedHammer3" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="Server" classname="HammerServer" runner="UnitTestRunner" type="expect_ready"/>
		</task_declaration>
		<test_declaration id="HammerTest1" descriptive_name="Blah de blah" author="Mark Little">
			<description>
	  	Hammer Test
	  </description>
			<configuration names_required="2"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="Server" parameters="-server 1" name_list="1,2" runtime_id="HammerServer1"/>
				<start_task id="Server" parameters="-server 2" name_list="1,2" runtime_id="HammerServer2"/>
				<perform_task id="Client1" name_list="1,2" runtime_id="Client1"/>
				<terminate_task runtime_id="HammerServer1"/>
				<terminate_task runtime_id="HammerServer2"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="HammerTest2" descriptive_name="Blah de blah" author="Mark Little">
			<description>
	  	Hammer Test 2
	  </description>
			<configuration names_required="2"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="Server" parameters="-server 1" name_list="1,2" runtime_id="HammerServer1"/>
				<start_task id="Server" parameters="-server 2" name_list="1,2" runtime_id="HammerServer2"/>
				<perform_task id="Client2" name_list="1,2" runtime_id="Client2"/>
				<terminate_task runtime_id="HammerServer1"/>
				<terminate_task runtime_id="HammerServer2"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="HammerTest3" descriptive_name="Blah de blah" author="Mark Little">
			<description>
	  	Hammer Test 3
	  </description>
			<configuration names_required="2"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="Server" parameters="-server 1" name_list="1,2" runtime_id="HammerServer1"/>
				<start_task id="Server" parameters="-server 2" name_list="1,2" runtime_id="HammerServer2"/>
				<perform_task id="Client3" name_list="1,2" runtime_id="Client3"/>
				<terminate_task runtime_id="HammerServer1"/>
				<terminate_task runtime_id="HammerServer2"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Current">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="CurrentTest" classname="CurrentTest" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="CurrentTest2" classname="CurrentTest2" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="GridServer" classname="GridServer" runner="UnitTestRunner" type="expect_ready"/>
			<task id="ImplGridServer" classname="ImplGridServer" runner="UnitTestRunner" type="expect_ready"/>
		</task_declaration>
		<test_declaration id="Current" descriptive_name="Current Test" author="Mark Little">
			<description>
	  			Current Test
	  		</description>
			<configuration names_required="1"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="GridServer" name_list="1" runtime_id="Server"/>
				<perform_task id="CurrentTest" name_list="1"/>
				<terminate_task runtime_id="Server"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="Current2" descriptive_name="Current Test 2" author="Mark Little">
			<description>
	  			Current Test 2
	  		</description>
			<configuration names_required="1" orb_flags="-ORBname arjuna.portable_interceptor.ots_context"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="ImplGridServer" jvm_parameters="-DOTS_CONTEXT_PROP_MODE=CONTEXT" name_list="1" runtime_id="Server"/>
				<perform_task id="CurrentTest2" jvm_parameters="-DOTS_CONTEXT_PROP_MODE=CONTEXT" name_list="1"/>
				<terminate_task runtime_id="Server"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="ExplicitInterposition">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="ExplicitInterClient" classname="ExplicitInterClient" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="SetGetServer" classname="SetGetServer" runner="UnitTestRunner" type="expect_ready"/>
		</task_declaration>
		<test_declaration id="ExplicitInterClient" descriptive_name="Explicit Interposition Test" author="Mark Little">
			<description>
	  	Explicit Interposition Test
	  </description>
			<configuration names_required="1"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="SetGetServer" name_list="1" runtime_id="Server"/>
				<perform_task id="ExplicitInterClient" name_list="1"/>
				<terminate_task runtime_id="Server"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Hammer">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="AtomicObject1" classname="AtomicObject1" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="AtomicObject2" classname="AtomicObject2" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="AtomicObject3" classname="AtomicObject3" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="Hammer1" descriptive_name="Hammer Test 1" author="Mark Little">
			<description>
	  	Hammer Test 1
	  </description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="AtomicObject1"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="Hammer2" descriptive_name="Hammer Test 2" author="Mark Little">
			<description>
	  	Hammer Test 2
	  </description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="AtomicObject2"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="Hammer3" descriptive_name="Hammer Test 3" author="Mark Little">
			<description>
	  	Hammer Test 3
	  </description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="AtomicObject3"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Heuristics">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="HeuristicTest" classname="HeuristicTest" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="Heuristic1" descriptive_name="Heuristic Test" author="Mark Little">
			<description>
	  	Heuristics Test
	  </description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="HeuristicTest"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="Heuristic2" descriptive_name="Heuristic On Commit Test" author="Mark Little">
			<description>
	  	Heuristics Test throws a heuristic exception on commit.
	  </description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="HeuristicTest" parameters="-abort"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="Heuristic3" descriptive_name="Heuristic On Prepare Test" author="Mark Little">
			<description>
	  	Heuristics Test throws a heuristic exception on prepare.
	  </description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="HeuristicTest" parameters="-prepare"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Interposition">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="InterpositionClient" classname="InterpositionClient" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="TranGridServer" classname="TranGridServer" runner="UnitTestRunner" type="expect_ready"/>
		</task_declaration>
		<test_declaration id="Interposition1" descriptive_name="Interposition Test" author="Mark Little">
			<description>Tests Interposition </description>
			<configuration orb_flags="-ORBname arjuna.portable_interceptor.ots_interposition"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="TranGridServer" runtime_id="Server"/>
				<perform_task id="InterpositionClient"/>
				<terminate_task runtime_id="Server"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Implicit">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="ImplicitClient" classname="ImplicitClient" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="ImplGridServer" classname="ImplGridServer" runner="UnitTestRunner" type="expect_ready"/>
		</task_declaration>
		<test_declaration id="Implicit1" descriptive_name="Implicit Test" author="Mark Little">
			<description>Tests implicit context propogation.
	  </description>
			<configuration names_required="1" orb_flags="-ORBname arjuna.portable_interceptor.ots_interposition"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="ImplGridServer" runtime_id="Server" name_list="1"/>
				<perform_task id="ImplicitClient" name_list="1"/>
				<terminate_task runtime_id="Server"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="JTA">
		<task_declaration>
			<task id="JTATest" classname="JTATest" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="JTATest1" descriptive_name="JTA Test" author="Mark Little">
			<description>Tests the JTA</description>
			<configuration/>
			<action_list>
				<perform_task id="JTATest" parameters="-creator DummyCreator"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="JTAHammer">
		<task_declaration>
			<task id="JTAHammer" classname="JTAHammer" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="JTAHammer1" descriptive_name="JTA Hammer" author="Mark Little">
			<description>Hammers the JTA</description>
			<configuration/>
			<action_list>
				<perform_task id="JTAHammer" parameters="-creator DummyCreator"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Local">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="LocalTest" classname="LocalTest" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="LocalTest1" descriptive_name="Local Test" author="Mark Little">
			<description>Local Test</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" runtime_id="RcvMngr" parameters="-test"/>
				<perform_task id="LocalTest"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Nested">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="NestedTester" classname="NestedTester" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="NestedTester1" descriptive_name="NestedTester1" author="Mark Little">
			<description>Tests nested transactions</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" runtime_id="RcvMngr" parameters="-test"/>
				<perform_task id="NestedTester"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="NestedTester2" descriptive_name="NestedTester2" author="Mark Little">
			<description>Tests nested transactions</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="NestedTester" parameters="-subtran"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="NestedTester3" descriptive_name="NestedTester3" author="Mark Little">
			<description>Tests nested transactions</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="NestedTester" parameters="-abort"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Performance">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="Performance1" classname="Performance1" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="Performance2" classname="Performance2" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="Performance3" classname="Performance3" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="Performance1" descriptive_name="Performance1" author="Mark Little">
			<description>Tests performance</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="Performance1"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="Performance2" descriptive_name="Performance2" author="Mark Little">
			<description>Tests performance</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="Performance2"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="Performance3" descriptive_name="Performance3" author="Mark Little">
			<description>Tests performance</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="Performance3"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Synchronizations">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="SynchTest" classname="SynchTest" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="Synchronization1" descriptive_name="Synchronization1" author="Mark Little">
			<description>Tests the synchronization feature</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="SynchTest"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Timeout">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="TerminationTest" classname="TerminationTest" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="DefaultTimeout" classname="DefaultTimeout" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="TimeoutClient" classname="TimeoutClient" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="SetGetServer" classname="SetGetServer" runner="UnitTestRunner" type="expect_ready"/>
		</task_declaration>
		<test_declaration id="Timeout1" descriptive_name="Termination Timeout Test" author="Mark Little">
			<description>Tests the transaction termination timeout feature</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="TerminationTest" jvm_parameters="-DOTS_TX_REAPER_TIMEOUT=1000"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="Timeout2" descriptive_name="Default Timeout Test" author="Mark Little">
			<description>Tests the default transaction timeout feature</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="DefaultTimeout" jvm_parameters="-DOTS_DEFAULT_TIMEOUT=2 -DOTS_TX_REAPER_TIMEOUT=1000"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="Timeout3" descriptive_name="Termination Timeout Test" author="Mark Little">
			<description>Tests the default transaction timeout feature</description>
			<configuration names_required="1" orb_flags="-ORBname arjuna.portable_interceptor.ots_context"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="SetGetServer" name_list="1" jvm_parameters="-DOTS_TX_REAPER_TIMEOUT=1000" runtime_id="Server"/>
				<perform_task id="TimeoutClient" name_list="1"/>
				<terminate_task runtime_id="Server"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="Transactions">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="OTS_Server" classname="OTS_Server" runner="ServiceRunner" type="expect_ready"/>
			<task id="AdvertiseOTSServer" classname="CosTransactionsTests.AdvertiseOTSServer" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="TransactionTest1" classname="TransactionTest1" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="TransactionTest2" classname="TransactionTest2" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="TransactionTest3" classname="TransactionTest3" runner="UnitTestRunner" type="expect_pass_fail" timeout="1000"/>
		</task_declaration>
		<test_declaration id="TransactionTest1" descriptive_name="Transactions Test 1" author="Mark Little">
			<description>Tries to terminate transactions out of order</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="TransactionTest1"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="TransactionTest2" descriptive_name="Transactions Test 2" author="Mark Little">
			<description>
				Shows  how Current  and a TransactionFactory  can be combined in the same  application,
				and the transactions are unrelated. Is a remote test.
			</description>
			<configuration names_required="1"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="OTS_Server" location="INDEPENDENT" runtime_id="OTS_Server" parameters="-test"/>
				<perform_task id="AdvertiseOTSServer" location="INDEPENDENT" name_list="1"/>
				<perform_task id="TransactionTest2" name_list="1" jvm_parameters="-DOTS_TRANSACTION_MANAGER=YES"/>
				<terminate_task runtime_id="OTS_Server"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="TransactionTest3" descriptive_name="Transactions Test 3" author="Mark Little">
			<description>Tests  garbage collection. Will  run silently  for a
while until it cannot create any  more transactions, and then rollback
all created transactions.</description>
			<configuration/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="TransactionTest3"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="JDBC2-mssql">
		<task_declaration>
			<task id="JDBC2Test" classname="JDBC2Test" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="BasicJDBC2Test1" descriptive_name="Basic JDBC2 Test 1" author="Mark Little">
			<description>
			  Creates a transaction,
			  Creates a table,
			  Puts some data into the table,
			  Retrieves the data back,
			  Commits the transaction,
			  Ensures the data exists after transaction is committed.
			</description>
			<configuration/>
			<action_list>
				<perform_task id="JDBC2Test" parameters="-clean -create -commit -sequelink -host dev07 -port 19996"/>
			</action_list>
		</test_declaration>
		<test_declaration id="BasicJDBC2Test2" descriptive_name="Basic JDBC2 Test 2" author="Mark Little">
			<description>
			  Creates a transaction,
			  Creates a table,
			  Puts some data into the table,
			  Retrieves the data back,
			  Rollsback the transaction,
			  Ensures the data doesn't exist after transaction is rolledback.
			</description>
			<configuration/>
			<action_list>
				<perform_task id="JDBC2Test" parameters="-clean -create -sequelink -host dev07 -port 19996"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="JDBC2-oracle">
		<task_declaration>
			<task id="JDBC2Test" classname="JDBC2Test" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="OracleTest" classname="ArjunaTestOracle" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="OracleTest1" descriptive_name="Test rollback of transactions" author="Mark Little">
			<description>
			  Creates a table,
			  Start a transaction,
			  Puts some data into the table,
			  Remove a specific row from the table,
			  Rollback the transaction,
			  Ensure the removed table still exists
			</description>
			<configuration/>
			<action_list>
				<perform_task id="OracleTest" parameters="-url jdbc:arjuna:sequelink://dev08:19996 -username jtsdev -password dilbert"/>
			</action_list>
		</test_declaration>
		<test_declaration id="BasicJDBC2Test1" descriptive_name="Basic JDBC2 Test 1" author="Mark Little">
			<description>
			  Creates a transaction,
			  Creates a table,
			  Puts some data into the table,
			  Retrieves the data back,
			  Commits the transaction,
			  Ensures the data exists after transaction is committed.
			</description>
			<configuration/>
			<action_list>
				<perform_task id="JDBC2Test" parameters="-clean -create -commit -sequelink -host dev08 -port 19996"/>
			</action_list>
		</test_declaration>
		<test_declaration id="BasicJDBC2Test2" descriptive_name="Basic JDBC2 Test 2" author="Mark Little">
			<description>
			  Creates a transaction,
			  Creates a table,
			  Puts some data into the table,
			  Retrieves the data back,
			  Rollsback the transaction,
			  Ensures the data doesn't exist after transaction is rolledback.
			</description>
			<configuration/>
			<action_list>
				<perform_task id="JDBC2Test" parameters="-clean -create -sequelink -host dev08 -port 19996"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="JDBC-cloudscape">
		<task_declaration>
			<task id="JDBCTest" classname="JDBCTest" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="BasicJDBCTest1" descriptive_name="JDBC Cloudscape Test 1" author="Mark Little">
			<description>
			  Creates a transaction,
			  Creates a table,
			  Puts some data into the table,
			  Retrieves the data back,
			  Commits the transaction,
			  Ensures the data still exists after transaction is committed.
			</description>
			<configuration/>
			<action_list>
				<perform_task id="JDBCTest" parameters="-clean -commit -cloudscape"/>
			</action_list>
		</test_declaration>
		<test_declaration id="BasicJDBCTest2" descriptive_name="JDBC Cloudscape Test 2" author="Mark Little">
			<description>
			  Creates a transaction,
			  Creates a table,
			  Puts some data into the table,
			  Retrieves the data back,
			  Rollsback the transaction,
			  Ensures the data doesn't exist after transaction is rolledback.
			</description>
			<configuration/>
			<action_list>
				<perform_task id="JDBCTest" parameters="-clean -cloudscape"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="JDBC2-cloudscape">
		<task_declaration>
			<task id="JDBC2Test" classname="JDBC2Test" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="BasicJDBC2Test1" descriptive_name="Basic JDBC2 Test 1" author="Mark Little">
			<description>
			  Creates a transaction,
			  Creates a table,
			  Puts some data into the table,
			  Retrieves the data back,
			  Commits the transaction,
			  Ensures the data exists after transaction is committed.
			</description>
			<configuration/>
			<action_list>
				<perform_task id="JDBC2Test" parameters="-clean -create -commit -cloudscape"/>
			</action_list>
		</test_declaration>
		<test_declaration id="BasicJDBC2Test2" descriptive_name="Basic JDBC2 Test 2" author="Mark Little">
			<description>
			  Creates a transaction,
			  Creates a table,
			  Puts some data into the table,
			  Retrieves the data back,
			  Rollsback the transaction,
			  Ensures the data doesn't exist after transaction is rolledback.
			</description>
			<configuration/>
			<action_list>
				<perform_task id="JDBC2Test" parameters="-clean -create -cloudscape"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="TransactionServer">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="TMClient" classname="TMClient" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="AdvertiseOTSServer" classname="CosTransactionsTests.AdvertiseOTSServer" runner="UnitTestRunner" type="expect_pass_fail"/>
			<task id="OTS_Server" classname="OTS_Server" runner="ServiceRunner" type="expect_ready"/>
			<task id="HammerServer" classname="HammerServer" runner="UnitTestRunner" type="expect_ready"/>
		</task_declaration>
		<test_declaration id="TransactionManager" descriptive_name="Transaction Manager" author="Mark Little">
			<description>This tests the use of a separate transaction manager server with AIT.</description>
			<configuration names_required="3"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="OTS_Server" location="INDEPENDENT" runtime_id="OTS_Server" parameters="-test"/>
				<perform_task id="AdvertiseOTSServer" location="INDEPENDENT" name_list="1"/>
				<start_task id="HammerServer" runtime_id="server" name_list="2,3" parameters="-server 1"/>
				<perform_task id="TMClient" name_list="2,1" jvm_parameters="-DOTS_TRANSACTION_MANAGER=YES"/>
				<terminate_task runtime_id="server"/>
				<terminate_task runtime_id="OTS_Server"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
	<test_group name="AITTests">
		<task_declaration>
			<task id="RecoveryManager" classname="com.arjuna.CosRecovery.RecoveryManager" runner="ServiceRunner" type="expect_ready"/>
			<task id="OTS_Server" classname="OTS_Server" runner="ServiceRunner" type="expect_ready"/>
			<task id="SimpleAITTest" classname="SimpleAITTest" runner="UnitTestRunner" type="expect_pass_fail"/>
		</task_declaration>
		<test_declaration id="AITTest01" descriptive_name="AIT Resource Test" author="Mark Little">
			<description>
			  This test increments a counter 100 times.  Commiting then rollingback.
			  Uses an external OTS factory.
			</description>
			<configuration names_required="1"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<start_task id="OTS_Server" location="independent" runtime_id="OTS_Server" parameters="-test"/>
				<perform_task id="SimpleAITTest" jvm_parameters="-DOTS_TRANSACTION_MANAGER=YES"/>
				<terminate_task runtime_id="OTS_Server"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
		<test_declaration id="AITTest02" descriptive_name="AIT Resource Test" author="Mark Little">
			<description>
			  This test increments a counter 100 times.  Commiting then rollingback.
			  Uses an a local OTS factory
			</description>
			<configuration names_required="1"/>
			<action_list>
				<start_task id="RecoveryManager" location="all" parameters="-test" runtime_id="RcvMngr"/>
				<perform_task id="SimpleAITTest"/>
				<terminate_task runtime_id="RcvMngr"/>
			</action_list>
		</test_declaration>
	</test_group>
</test_set>
