/*
 * JBoss, Home of Professional Open Source
 * Copyright 2008, Red Hat Middleware LLC, and individual contributors
 * as indicated by the @author tags.
 * See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU Lesser General Public License, v. 2.1.
 * This program is distributed in the hope that it will be useful, but WITHOUT A
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License,
 * v.2.1 along with this distribution; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301, USA.
 *
 * (C) 2008,
 * @author JBoss Inc.
 */
//

// Copyright (C) 2001,

//

// HP Arjuna Labs

// Newcastle upon Tyne,

// Tyne and Wear,

// UK.

//

// $Id: Test.java 170 2008-03-25 18:59:26Z jhalliday $



package org.jboss.dtf.testframework.unittest;



/**

 * This class must be extended to implement a unit test.  It contains various

 * methods that are used by the test to report information, e.g. logInformation,

 * logResult, etc.

 */

public abstract class Test implements TestInterface
{
	private final static String[] RESULT_TEXT = {"Failed","Passed","Uncertain"};

    public final static int     FAILURE = 0,
                                SUCCESS = 1,
                                UNCERTAIN = 2;

	protected String[]			_parameters = null;
	private String				_testId = null;
	private String				_taskName = null;
	private HarnessInterface	_harness = null;

	private boolean				_succeeded = false;
	private boolean				_failed = false;
	private boolean				_uncertain = false;

    private boolean             _resultLogged = false;

	private final static String SUCCESS_TEXT = "Passed",
								FAILURE_TEXT = "Failed",
								UNCERTAIN_TEXT = "Uncertain";

	/**
	 * Initialisation routine which is called by the test framework passing the
	 * parameters for the test.
	 *
	 * @param taskName The task name of this test class.
	 * @param testName The unqiue identifier for this test.
	 * @param parameters An array of string parameters.
	 * @param harness A reference to the harness which initiated this test
	 */
	public final void initialise(String				testName,
								 String				taskName,
								 String[]			parameters,
								 HarnessInterface	harness)
	{
		_taskName = taskName;
		_testId = testName;
		_parameters = parameters;
		_harness = harness;
	}

	/**
	 * Used to retrieve the parameters passed to the test.  The parameters declared
	 * in the test definition XML are passed first followed by the unique names
	 * generated by the test framework.
	 * @returns An array of Strings representing the parameters passed to the test.
	 */
	protected final String[] getParameters()
	{
		return(_parameters);
	}

	/**
	 * Called by the framework to run the test and log the results
	 */
	public final void runTest()
	{
		try
		{
			run(getParameters());
		}
		catch (Throwable e)
		{
			System.out.println("ERROR - "+e.toString());
			e.printStackTrace(System.err);
			assertFailure();
		}

		testComplete();
	}

	/**
	 * The main test method which must assert either a pass or a fail.
	 */
	public abstract void run(String[] args);

	/**
	 * Accessor for the name of this test
	 * @returns The name of this test.
	 */
	public final String getTestName()
	{
		return(_testId);
	}

	public final String getTaskName()
	{
		return(_taskName);
	}

	/**
	 * This method logs textual information to the logger.
	 * @param information The textual information to be logged.
	 */
	public final void logInformation(String information)
	{
		if (_harness!=null)
		{
			_harness.logInformation(information);
		}
	}

	/**
	 * This method logs textual information to the logger.  At the test run level.
	 * @param information The textual information to be logged.
	 */
	public final void logTestRunInformation(String information)
	{
		if (_harness!=null)
		{
			_harness.logTestRunInformation(information);
		}
	}

	/**
	 * This method is called by Servers to indicate to the testframework they are now
	 * in a state where they are ready to receive requests.
	 */
	public final void assertReady()
	{
		System.out.println("Ready");
		logInformation("Ready Signalled");
	}

	/**
	 * This method is called to indicate that the test has been successful i.e. the test
	 * has passed.
	 */
	public final void assertSuccess()
	{
		if (!_failed)
		{
			_succeeded = true;
           logResult( getResultText() );
	}
	}

	/**
	 * This method is called to indicate that the test has failed.
	 */
	public final void assertFailure()
	{
		_failed = true;

		/*
		 * Log result
		 */
		logResult(getResultText());
	}

	/**
	 * This method is called to indicate that the test cannot determine whether it
	 * passed or failed.  This result usually means the test needs to be re-run.
	 * Usually a test will not call this directly.
	 */
	public final void assertUncertain()
	{
		if ((!_succeeded) && (!_failed))
		{
			_uncertain = true;
			/*
			 * Log weak result
			 */
			logResult(getResultText());
		}
	}

	/**
	 * This method evaluates the <b>value</b> - if it is <b>false</b> then the test
	 * is presumed to have failed.  This method does nothing if <b>value</b> is true.
	 * @param value If this boolean is false the test is assumed to have failed.
     * @return Returns the value passed to it.
	 */
	public final boolean assertTrue(boolean value)
	{
		if (!value)
		{
			_failed = true;
			/*
			 * Log result
			 */
			logResult(getResultText());
		}

		return(value);
	}

    /**
     * This method evaluates the <b>result</b> and asserts the necessary result.
     *
     * @param result The result to assert SUCCESS, FAILURE
     */
    public final void assertSuccessOrFailue(int result)
    {
        switch (result)
        {
            case SUCCESS:
                assertSuccess();
                break;
            case FAILURE:
                assertFailure();
                break;
        }
    }

	public static final String getResultText(int result)
	{
		return(RESULT_TEXT[result]);
	}

    /**
     * This method returns the result of this test.  If the result has not yet
     * been logged then a result of UNCERTAIN is returned.
     *
     * @returns The test's result
     */
    public final int getTestResult()
    {
        int returnValue = UNCERTAIN;

        if (_resultLogged)
        {
            if (_failed)
            {
                returnValue = FAILURE;
            }
            else
            {
                if (_succeeded)
                {
                    returnValue = SUCCESS;
                }
            }
        }

        return(returnValue);
    }

	public final String getResultText()
	{
        String result = "";

        if (_failed)
        {
            result = FAILURE_TEXT;
        }
        else
        {
            if (_succeeded)
            {
                result = SUCCESS_TEXT;
            }
            else
            {
                result = UNCERTAIN_TEXT;
            }
        }

        return(result);
	}


	/**
	 * This method is called by the testframework when the test has complete.  It
	 * evaluates the result of the test and logs the result to the logger.
	 */
	public final void testComplete()
	{
        if (!_resultLogged)
        {
			logResult(getResultText());
            _resultLogged = true;
        }
	}

	/**
	 * This method makes a call to LoggingService.logResult() which sets the result
	 * of the task in the database table TestTaskResults
	 */
	protected final void logResult(String result)
	{
		_harness.logResult(result);
	}

	public boolean registerService(String name, String ior)
	{
		boolean returnValue = false;

		if (_harness!=null)
		{
			returnValue = _harness.registerService(name,ior);
		}

		return(returnValue);
	}

	public String getService(String name) throws ServiceLookupException
	{
		String returnValue = null;

		if (_harness!=null)
		{
			returnValue = _harness.getService(name);
		}
		else
			throw new ServiceLookupException("No harness to retrieve service '"+name+"' from!");

		return(returnValue);
	}

	/**
	 * Utility method for taking two string arrays and concatenating them
	 * @param args The first string array
	 * @param serverNames The second string array
	 * @returns An array made up of the first string array followed by the second string array
	 */
	protected static final String[] appendServerNames( String[] args, String[] serverNames)
	{
		/*
		 * Create destination array which will be both arrays concatenated
		 */
		String[] newArgs = new String[args.length + serverNames.length];

		/*
		 * Copy the 'args' source array into the new array
		 */
		System.arraycopy(args,0,newArgs,0,args.length);

		/*
		 * Copy the 'serverNames' source array into the new array
		 */
		System.arraycopy(serverNames,0,newArgs,args.length,serverNames.length);

		return(newArgs);
	}
}
