/*
 * JBoss, Home of Professional Open Source
 * Copyright 2008, Red Hat Middleware LLC, and individual contributors
 * as indicated by the @author tags.
 * See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU Lesser General Public License, v. 2.1.
 * This program is distributed in the hope that it will be useful, but WITHOUT A
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License,
 * v.2.1 along with this distribution; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301, USA.
 *
 * (C) 2008,
 * @author JBoss Inc.
 */
//
// Copyright (C) 2001,
//
// HP Arjuna Labs
// Newcastle upon Tyne,
// Tyne and Wear,
// UK.
//
// $Id: PluginManager.java 170 2008-03-25 18:59:26Z jhalliday $

package org.jboss.dtf.testframework.manager;

import javax.swing.JFileChooser;
import java.util.Properties;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Vector;

/**
 *
 * @author  administrator
 */
public class PluginManager extends javax.swing.JDialog {

    /** Creates new form PluginManager */
    public PluginManager(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        populateDialog();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        _pluginList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        installButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints3;

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints4;

        jPanel2.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setPreferredSize(new java.awt.Dimension(300, 200));
        jPanel2.setMinimumSize(new java.awt.Dimension(300, 200));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 100));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(200, 100));
        _pluginList.setBorder(new javax.swing.border.EtchedBorder());
        _pluginList.setPreferredSize(new java.awt.Dimension(180, 100));
        _pluginList.setMaximumSize(new java.awt.Dimension(32768, 32768));
        _pluginList.setVisibleRowCount(5);
        _pluginList.setMinimumSize(new java.awt.Dimension(180, 100));
        _pluginList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                _pluginListValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(_pluginList);

        gridBagConstraints4 = new java.awt.GridBagConstraints();
        gridBagConstraints4.gridx = 0;
        gridBagConstraints4.gridy = 1;
        jPanel2.add(jScrollPane1, gridBagConstraints4);

        jPanel1.setLayout(new java.awt.GridLayout(3, 0));

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        installButton.setText("Install");
        installButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installButtonActionPerformed(evt);
            }
        });

        jPanel1.add(installButton);

        removeButton.setToolTipText("Remove currently selected plug-in");
        removeButton.setText("Remove");
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jPanel1.add(removeButton);

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jPanel1.add(exitButton);

        gridBagConstraints4 = new java.awt.GridBagConstraints();
        gridBagConstraints4.gridx = 1;
        gridBagConstraints4.gridy = 1;
        jPanel2.add(jPanel1, gridBagConstraints4);

        jLabel1.setText("Installed Plug-ins");
        gridBagConstraints4 = new java.awt.GridBagConstraints();
        gridBagConstraints4.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jLabel1, gridBagConstraints4);

        gridBagConstraints3 = new java.awt.GridBagConstraints();
        getContentPane().add(jPanel2, gridBagConstraints3);

        pack();
    }//GEN-END:initComponents

    private void _pluginListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event__pluginListValueChanged
        removeButton.setEnabled(true);
    }//GEN-LAST:event__pluginListValueChanged

    public static String stripExtension(String filename)
    {
        return(filename.substring(0,filename.lastIndexOf('.')));
    }

    private void installButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installButtonActionPerformed
        JFileChooser jfc = new JFileChooser();

        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            java.io.File selectedFile = jfc.getSelectedFile();

            try
            {
                java.net.URLClassLoader urlClassLoader = new java.net.URLClassLoader(new java.net.URL[] { selectedFile.toURL() });

                Class testClass = urlClassLoader.loadClass(stripExtension(selectedFile.getName()));

                DTFManagerPlugin plugin = (DTFManagerPlugin)testClass.newInstance();
                javax.swing.JOptionPane.showMessageDialog(this,"'"+plugin.getName()+"' successfully added to plugins");
                plugins.add(selectedFile.getAbsolutePath());
                _pluginList.setListData(plugins);
            }
            catch (Exception e)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Invalid plugin JAR");
            }
        }
    }//GEN-LAST:event_installButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        plugins.remove(_pluginList.getSelectedIndex());
        _pluginList.setListData(plugins);
    }//GEN-LAST:event_removeButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        Properties props = new Properties();

        props.setProperty("NumberOfPlugins",String.valueOf(plugins.size()));

        for (int count=0;count<plugins.size();count++)
        {
            props.setProperty("PlugIn_"+count,(String)plugins.get(count));
        }

        try
        {
            FileOutputStream fin = new FileOutputStream("plugins.conf");
            props.store(fin,"DTF Manager Plugins");
            fin.close();
        }
        catch (Exception e)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Failed to save your plugins");
        }

        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void populateDialog() {
        try
        {
            String listData;
            Properties props = new Properties();
            FileInputStream fin = new FileInputStream("plugins.conf");
            props.load(fin);
            fin.close();

            int numProperties = Integer.parseInt(props.getProperty("NumberOfPlugins","0"));

            for (int count=0;count<numProperties;count++)
            {
                listData = props.getProperty("PlugIn_"+count);

                if (listData == null)
                {
                    System.out.println("Error while parsing plugins.conf");
                    javax.swing.JOptionPane.showMessageDialog(this,"Error while loading plugins.conf");
                    System.exit(0);
                }

                plugins.add(listData);
            }

            _pluginList.setListData(plugins);
        }
        catch (Exception e)
        {
            System.err.println(e);
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        new PluginManager(new javax.swing.JFrame(), true).show();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList _pluginList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton installButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    private java.util.Vector plugins = new Vector();
}
